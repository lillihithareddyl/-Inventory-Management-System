import json


class Product:
    """Represents a product in the inventory."""
    def __init__(self, product_id, name, price, stock):
        self.product_id = product_id
        self.name = name
        self.price = price
        self.stock = stock

    def update_stock(self, amount):
        self.stock += amount

    def to_dict(self):
        """Convert product details to a dictionary for easy storage."""
        return {
            "product_id": self.product_id,
            "name": self.name,
            "price": self.price,
            "stock": self.stock
        }

    def __str__(self):
        return f"ID: {self.product_id}, Name: {self.name}, Price: ${self.price}, Stock: {self.stock}"


class Inventory:
    """Handles inventory management."""
    def __init__(self):
        self.products = {}
        self.load_data()

    def load_data(self):
        """Load products from a JSON file."""
        try:
            with open("inventory.json", "r") as file:
                data = json.load(file)
                for product_data in data:
                    product = Product(**product_data)
                    self.products[product.product_id] = product
        except FileNotFoundError:
            self.products = {}

    def save_data(self):
        """Save products to a JSON file."""
        with open("inventory.json", "w") as file:
            data = [product.to_dict() for product in self.products.values()]
            json.dump(data, file, indent=4)

    def add_product(self):
        """Add a new product to the inventory."""
        product_id = input("Enter Product ID: ")
        if product_id in self.products:
            print("Product ID already exists.")
            return
        name = input("Enter Product Name: ")
        price = float(input("Enter Product Price: "))
        stock = int(input("Enter Stock Quantity: "))
        product = Product(product_id, name, price, stock)
        self.products[product_id] = product
        print("Product added successfully.")
        self.save_data()

    def update_product_stock(self):
        """Update stock for an existing product."""
        product_id = input("Enter Product ID: ")
        product = self.products.get(product_id)
        if not product:
            print("Product not found.")
            return
        amount = int(input("Enter stock change (positive for adding, negative for removing): "))
        product.update_stock(amount)
        print("Stock updated successfully.")
        self.save_data()

    def delete_product(self):
        """Delete a product from the inventory."""
        product_id = input("Enter Product ID to delete: ")
        if product_id in self.products:
            del self.products[product_id]
            print("Product deleted successfully.")
            self.save_data()
        else:
            print("Product not found.")

    def view_inventory(self):
        """Display all products in the inventory."""
        if not self.products:
            print("No products in inventory.")
            return
        print("\n=== Inventory Details ===")
        for product in self.products.values():
            print(product)

    def generate_report(self):
        """Generate a sales report."""
        print("\n=== Inventory Report ===")
        total_value = sum(product.price * product.stock for product in self.products.values())
        print(f"Total Inventory Value: ${total_value:.2f}")
        print(f"Total Products: {len(self.products)}")


def main():
    inventory = Inventory()
    while True:
        print("\n=== Inventory Management System ===")
        print("1. Add Product")
        print("2. Update Product Stock")
        print("3. Delete Product")
        print("4. View Inventory")
        print("5. Generate Report")
        print("6. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            inventory.add_product()
        elif choice == "2":
            inventory.update_product_stock()
        elif choice == "3":
            inventory.delete_product()
        elif choice == "4":
            inventory.view_inventory()
        elif choice == "5":
            inventory.generate_report()
        elif choice == "6":
            print("Exiting the system. Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
